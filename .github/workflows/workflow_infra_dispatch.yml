name: Create Terraform code for tf-infrastructure folder
on:
  workflow_dispatch:
    inputs:
      arm_client_id:
        description: 'Azure Client ID'
        required: true
      arm_client_secret:
        description: 'Azure Client Secret'
        required: true
        default: '${{ secrets.client_secret }}'
      arm_tenant_id:
        description: 'Azure Tenant ID'
        required: true
      arm_subscription_id:
        description: 'Azure Subscription ID'
        required: true
      # resource_group:
      #   description: 'Resource Group Name'
      #   required: true
      # nsg_name:
      #   description: 'NSG Name'
      #   required: true
      terraform_version:
        description: 'Terraform Version Used For Infrastructure Deployment'
        required: true

env:
  workdir: "Docker/infrastructure/"
  TF_VAR_private_key: ${{ secrets.private_key }}
  TF_VAR_client_secret: ${{ secrets.client_secret }}
  TF_VAR_login_password: ${{ secrets.login_password }}
  TF_VAR_custom_data_vm_1: "${{ github.workspace }}/Docker/infrastructure/scripts/docker_install.sh"
  TF_VAR_custom_data_vm_2: "${{ github.workspace }}/Docker/infrastructure/scripts/vault_install.sh"
  TF_VAR_custom_data_vm_3: "${{ github.workspace }}/Docker/infrastructure/scripts/ghrunner_install.sh"

jobs:
  Terrraform-deployments:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Terraform install version
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      
      - name: Azure CLI login
        run: az login --service-principal -u "${{ github.event.inputs.arm_client_id }}" -p "${{ github.event.inputs.arm_client_secret }}" --tenant "${{ github.event.inputs.arm_tenant_id }}"

      - name: Get Runner IP
        id: get_ip
        run: echo "PUBLIC_IP=$(curl -s https://ipinfo.io/ip)" >> $GITHUB_ENV

      # - name: Add NSG Rule
      #   run: |
      #     az network nsg rule create --resource-group ${{ github.event.inputs.resource_group }} --nsg-name ${{ github.event.inputs.nsg_name }} \
      #       --name AllowGitHubActionsRunner --priority 300 --source-address-prefixes ${{ env.PUBLIC_IP }} \
      #       --destination-address-prefixes '*' --destination-port-ranges 8200 --direction Inbound --access Allow --protocol Tcp
          
      - name: Terraform commands
        run: |
          cd ${{ github.workspace }}/${{ env.workdir }}
          terraform init
          terraform fmt .
          terraform validate
          terraform plan -no-color
          terraform apply -auto-approve
        env:
          ARM_CLIENT_SECRET: ${{ github.event.inputs.arm_client_secret }}
          ARM_CLIENT_ID:  ${{ github.event.inputs.arm_client_id }}
          ARM_TENANT_ID: ${{ github.event.inputs.arm_tenant_id }}
          ARM_SUBSCRIPTION_ID: ${{ github.event.inputs.arm_subscription_id }}

      # - name: Remove NSG Rule
      #   if: always()
      #   run: |
      #     az network nsg rule delete --resource-group ${{ github.event.inputs.resource_group }} --nsg-name ${{ github.event.inputs.nsg_name }} --name AllowGitHubActionsRunner
